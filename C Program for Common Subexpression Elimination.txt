#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    char expr[MAX];
    char tempVar[MAX];
} Subexpression;

Subexpression commonSubexpr[MAX];
int subexprCount = 0;

int isCommonSubexpr(char* expr) {
    for (int i = 0; i < subexprCount; i++) {
        if (strcmp(commonSubexpr[i].expr, expr) == 0) {
            return i;
        }
    }
    return -1;
}

void addCommonSubexpr(char* expr) {
    strcpy(commonSubexpr[subexprCount].expr, expr);
    sprintf(commonSubexpr[subexprCount].tempVar, "t%d", subexprCount);
    subexprCount++;
}

void printOptimizedCode(char* originalCode[], int codeSize) {
    printf("Optimized Code:\n");

    // Print common subexpressions
    for (int i = 0; i < subexprCount; i++) {
        printf("%s = %s\n", commonSubexpr[i].tempVar, commonSubexpr[i].expr);
    }

    // Print transformed code
    for (int i = 0; i < codeSize; i++) {
        char expr[MAX];
        char temp[MAX];
        sscanf(originalCode[i], "%*s = %s", expr);
        int index = isCommonSubexpr(expr);
        if (index != -1) {
            sscanf(originalCode[i], "%*s = %*s %s", temp);
            printf("%s = %s %s\n", temp, commonSubexpr[index].tempVar, temp);
        } else {
            printf("%s\n", originalCode[i]);
        }
    }
}

int main() {
    char* originalCode[] = {
        "x = a * b + c",
        "y = a * b + d",
        "z = e * f + g"
    };
    int codeSize = sizeof(originalCode) / sizeof(originalCode[0]);

    for (int i = 0; i < codeSize; i++) {
        char expr[MAX];
        sscanf(originalCode[i], "%*s = %s", expr);
        int index = isCommonSubexpr(expr);
        if (index == -1) {
            addCommonSubexpr(expr);
        }
    }

    printOptimizedCode(originalCode, codeSize);

    return 0;
}
