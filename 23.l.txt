%{
#include <stdio.h>
#include <stdlib.h>
%}

%option noyywrap

/* Define regular expressions for tokens */
%%
"#include"             { printf("INCLUDE_DIRECTIVE: %s\n", yytext); }
"void"                { printf("KEYWORD: %s\n", yytext); }
"int"                 { printf("KEYWORD: %s\n", yytext); }
"printf"              { printf("FUNCTION: %s\n", yytext); }
[a-zA-Z_][a-zA-Z0-9_]* { printf("IDENTIFIER: %s\n", yytext); }
[0-9]+                { printf("NUMBER: %s\n", yytext); }
"=="                  { printf("EQUALITY_OPERATOR: %s\n", yytext); }
"="                   { printf("ASSIGNMENT_OPERATOR: %s\n", yytext); }
";"                   { printf("SEMICOLON: %s\n", yytext); }
","                   { printf("COMMA: %s\n", yytext); }
"("                   { printf("LEFT_PAREN: %s\n", yytext); }
")"                   { printf("RIGHT_PAREN: %s\n", yytext); }
"{"                   { printf("LEFT_BRACE: %s\n", yytext); }
"}"                   { printf("RIGHT_BRACE: %s\n", yytext); }
[ \t\n]+              /* Ignore whitespace */
.                     { printf("UNKNOWN: %s\n", yytext); }
%%

int main(int argc, char **argv) {
    if (argc > 1) {
        FILE *file = fopen(argv[1], "r");
        if (!file) {
            perror("Error opening file");
            return 1;
        }
        yyin = file;
    }
    yylex();
    return 0;
}
